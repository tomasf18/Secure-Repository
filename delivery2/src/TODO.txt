
WHEN A SUBJECT IS SUSPENDED/REMOVED FROM A MANAGER ROLE, I MUST ENSURE THAT, IF HE IS A MANAGER, THERE IS AT LEAST ONE MORE MANAGER AT THET ORG -> DONE
WHEN A DOCUMENT IS ADDED, ADD TO DocumentRolePermission TABLE ALL THE DOCUMENT PERMISSIONS TO MANAGER ROLE! -> DONE
WHEN ADDING A SUBJECT TO A MANAGER ROLE, MAKE SURE TO GIV HIM ALL THE PERMISSIONS (it's the manager who has the permissions, not the subject) -> DONE 
VERIFY IF THE SUBJECT, WHEN ASSMING A ROLE, HAS THAT ROLE IN THE ORG -> DONE
ALSO STORE THE SALT USED TO ENCRYPT THE CONTENT STORED BY THE REPO -> DONE
# TODO: Encrypt
# Create response
result = {
    "session_id": session.id,
    "username": session.subject_username,
    "organization": session.organization_name,
    "roles": [role.name for role in session.session_roles],
    "public_key": base64.b64encode(session_server_public_key).decode('utf-8'), # So that the client can generate the shared secret (key for the session symmetric encryption)
    "nonce": nonce,
}
TIME TO LIVE OF THE SESSIONS -> DONE
tirar ao manager todas as permissoes de um documento -> DONE
rep_suspend_subject         // Vou a todas as sessoes dele e elimio as e depois, no create, session vejo se ele esta suspenso (e no suspend role tmb) -> DONE
A DOC_ACL access right allows a role holder to add or remove access rights for other roles. At least one role must keep this right for each document, in order to allow an ACL to be updated. -> Doc

---


CORRECT ERROR MESSAGES FOR EACH COMMAND, SO THAT NO USEFUL MESSAGE FOR ATTACKERS IS SHOWN
TRY WIRESHARK TO SEE ENCRYPTED/PLAINTEXT CONTENT
No comando rep_list_role_permissions nós retornamos as permissões de um dado role incluindo as permissões do role nos documentos.


DONT FORGET: DO NOT RESET THE DATABASE BETWEEN SERVER REINITS, BUT USE THAT AS A THIRD FUNCTION INSTEAD (add an endpoint do that client can delete all the data from the repo)